// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Tests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("HiterNilve_Ser029")]
    public partial class HiterNilve_Ser029Feature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "HiterNilve_Ser029.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "HiterNilve_Ser029", "באג 18357\r\n\r\nבדיקת תקינות - Ser029 עדכון היתר נלווה \r\nSWAGGER URL : ​​/api​/Addit" +
                    "ionalPermit​/CreatePaymentVoucherToAdditionalPermit\r\nהשירות מייצר או מעדכן היתר " +
                    "נלווה לפי קלט של סטטוס ומייצר שובר לתשלום אם נדרש\r\nהשירות נקרא מתוך שרות 058 עם " +
                    "סטטוס ממתין לאישור אגף רישוי\r\n\r\nלבדוק - השירות לא מייצר היתר נלווה אם קיים בתיק " +
                    "העסק היתר נלווה פעיל מאותו סוג, לכן חובה להפעיל שירות זה רק לאחר ביטול ההיתר קיי" +
                    "ם\r\n\r\nאם לא אותרה אף רשומה פעילה  --> יצירת היתר נלווה :scenario <create a new it" +
                    "er nilve>\r\n\r\nאם קיימת רשומה שבה סטטוס היתר נלווה = סטטוס בקלט --> מסיים שרות עם " +
                    "הודעה  :scenario <hiter nilve is exists with status = status in the input>\r\n\'add" +
                    "itional permit status same DB status\'\r\n\r\nאם קיימת רשומה שבה סטטוס היתר נלווה > ס" +
                    "טטוס בקלט --> מסיים שרות עם הודעה :scenario <hiter nilve is exists with status >" +
                    " status in the input>\r\n\'the additional permit db status bigger from request stat" +
                    "us\'\r\n\r\nאם קיימת רשומה שבה סטטוס היתר נלווה > סטטוס בקלט --> מעדכן סטטוס היתר  :s" +
                    "cenario <hiter nilve is exists with status < status in the input>\r\nאם אותרה רשומ" +
                    "ה פעילה (שאינה עונה על אחד התנאים לעיל) מעדכן ברשומה סטטוס היתר שהתקבל בקלט\r\nאם " +
                    "סטטוס היתר נלווה = ממתין לתשלום מפעיל שירות ser061 חישוב תעריף אגרת היתר נלווה \r" +
                    "\nאם קוד שגיאה שחזר מהשירות > 1 מחזיר שגיאה [חישוב תעריף אגרה נכשל] ומסיים\r\nאם תע" +
                    "ריף אגרת היתר נלווה שחזר מהשירות = 0 אז מעדכן סטטוס היתר נלווה = \"הופק\" אחרת מפע" +
                    "יל שירות 025 - יצירת שובר\r\nאם קוד שגיאה שחזר מהשירות = 2 אז מחזיר קוד שגיאה [יצי" +
                    "רת שובר לתשלום נכשלה] ומסיים  \r\n\r\nקיים בטסט - Ser028 יצירת בקשה ותחנות להיתר נלו" +
                    "וה", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("create a new iter nilve")]
        [NUnit.Framework.CategoryAttribute("Test")]
        [NUnit.Framework.TestCaseAttribute("1", "0", "1", "1", "1", "\'No\'", "\'null\'", null)]
        [NUnit.Framework.TestCaseAttribute("1", "0", "1", "2", "1", "\'No\'", "\'null\'", null)]
        [NUnit.Framework.TestCaseAttribute("2", "0", "2", "1", "1", "\'No\'", "\'null\'", null)]
        [NUnit.Framework.TestCaseAttribute("3", "0", "1", "1", "1", "\'No\'", "\'null\'", null)]
        [NUnit.Framework.TestCaseAttribute("7", "0", "1", "1", "1", "\'No\'", "\'null\'", null)]
        public virtual void CreateANewIterNilve(string sugIter, string sibatBakasha, string numOfAdditionalIters, string statusHiterInput, string statusHiterOutput, string shovarCreatedDB, string responseResult, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Test"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("SugIter", sugIter);
            argumentsOfScenario.Add("SibatBakasha", sibatBakasha);
            argumentsOfScenario.Add("NumOfAdditionalIters", numOfAdditionalIters);
            argumentsOfScenario.Add("StatusHiterInput", statusHiterInput);
            argumentsOfScenario.Add("StatusHiterOutput", statusHiterOutput);
            argumentsOfScenario.Add("ShovarCreatedDB", shovarCreatedDB);
            argumentsOfScenario.Add("ResponseResult", responseResult);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("create a new iter nilve", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 30
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 31
 testRunner.Given("valid access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 32
 testRunner.And("default tik rishuy with parameters for mahut: 1, 3, 7, 0, 10", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 33
 testRunner.And(string.Format("run Ser028 create additional permit with parameters: {0}, {1}, 10.0, {2}", sugIter, sibatBakasha, numOfAdditionalIters), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 36
 testRunner.And(string.Format("run Ser029 permit update with parameters: {0}", statusHiterInput), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 37
 testRunner.Then("hiter nilve created in DB: \'Yes\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 38
 testRunner.Then(string.Format("shovar tashlum for Hiter created in DB: {0}", shovarCreatedDB), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 39
 testRunner.Then(string.Format("Ser029 response description should be {0}", responseResult), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 40
 testRunner.Then(string.Format("status of HiterNilve in DB: {0}", statusHiterOutput), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 41
 testRunner.Then("validate hiter nilve: 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("hiter nilve is exists with status equal to status in the input")]
        [NUnit.Framework.CategoryAttribute("Test")]
        [NUnit.Framework.TestCaseAttribute("1", "1", "9", "1", "0", "1", "1", "0", "\'No\'", "\'additional permit status same DB status\'", null)]
        [NUnit.Framework.TestCaseAttribute("1", "1", "9", "1", "0", "1", "3", "0", "\'No\'", "\'additional permit status same DB status\'", null)]
        [NUnit.Framework.TestCaseAttribute("1", "1", "9", "1", "0", "1", "4", "0", "\'No\'", "\'additional permit status same DB status\'", null)]
        [NUnit.Framework.TestCaseAttribute("1", "1", "9", "1", "0", "1", "5", "0", "\'No\'", "\'additional permit status same DB status\'", null)]
        [NUnit.Framework.TestCaseAttribute("1", "1", "9", "1", "0", "1", "6", "0", "\'No\'", "\'additional permit status same DB status\'", null)]
        public virtual void HiterNilveIsExistsWithStatusEqualToStatusInTheInput(string numOfMahuyot, string maslul, string mahutRashit, string sugIter, string sibatBakasha, string numOfAdditionalIters, string statusHiterInput, string daysBack, string shovarCreatedDB, string responseResult, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Test"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("NumOfMahuyot", numOfMahuyot);
            argumentsOfScenario.Add("Maslul", maslul);
            argumentsOfScenario.Add("MahutRashit", mahutRashit);
            argumentsOfScenario.Add("SugIter", sugIter);
            argumentsOfScenario.Add("SibatBakasha", sibatBakasha);
            argumentsOfScenario.Add("NumOfAdditionalIters", numOfAdditionalIters);
            argumentsOfScenario.Add("StatusHiterInput", statusHiterInput);
            argumentsOfScenario.Add("DaysBack", daysBack);
            argumentsOfScenario.Add("ShovarCreatedDB", shovarCreatedDB);
            argumentsOfScenario.Add("ResponseResult", responseResult);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("hiter nilve is exists with status equal to status in the input", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 54
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 55
 testRunner.Given("valid access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 56
 testRunner.And(string.Format("default tik rishuy with parameters for mahut: {0}, {1}, {2}, {3}, 10.0", numOfMahuyot, maslul, mahutRashit, daysBack), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 57
 testRunner.And(string.Format("run Ser028 create additional permit with parameters: {0}, {1}, 1.0, {2}", sugIter, sibatBakasha, numOfAdditionalIters), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 59
 testRunner.And(string.Format("run Ser029 permit update with parameters: {0}", statusHiterInput), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 60
 testRunner.Then("hiter nilve created in DB: \'Yes\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 62
 testRunner.Given(string.Format("run Ser029 permit update with parameters: {0}", statusHiterInput), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 63
 testRunner.Then(string.Format("Ser029 response description should be {0}", responseResult), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 64
 testRunner.Then(string.Format("status of HiterNilve in DB: {0}", statusHiterInput), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 65
 testRunner.Then(string.Format("shovar tashlum for Hiter created in DB: {0}", shovarCreatedDB), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("hiter nilve is exists with status more than status in the input")]
        [NUnit.Framework.CategoryAttribute("Test")]
        [NUnit.Framework.TestCaseAttribute("1", "1", "9", "1", "0", "1", "1", "0", "\'No\'", "\'the additional permit db status bigger from request status\'", null)]
        [NUnit.Framework.TestCaseAttribute("1", "1", "9", "1", "0", "1", "2", "0", "\'No\'", "\'the additional permit db status bigger from request status\'", null)]
        [NUnit.Framework.TestCaseAttribute("1", "1", "9", "1", "0", "1", "3", "0", "\'No\'", "\'the additional permit db status bigger from request status\'", null)]
        [NUnit.Framework.TestCaseAttribute("1", "1", "9", "1", "0", "1", "4", "0", "\'No\'", "\'the additional permit db status bigger from request status\'", null)]
        [NUnit.Framework.TestCaseAttribute("1", "1", "9", "1", "0", "1", "5", "0", "\'No\'", "\'the additional permit db status bigger from request status\'", null)]
        public virtual void HiterNilveIsExistsWithStatusMoreThanStatusInTheInput(string numOfMahuyot, string maslul, string mahutRashit, string sugIter, string sibatBakasha, string numOfAdditionalIters, string statusHiterInput, string daysBack, string shovarCreatedDB, string responseResult, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Test"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("NumOfMahuyot", numOfMahuyot);
            argumentsOfScenario.Add("Maslul", maslul);
            argumentsOfScenario.Add("MahutRashit", mahutRashit);
            argumentsOfScenario.Add("SugIter", sugIter);
            argumentsOfScenario.Add("SibatBakasha", sibatBakasha);
            argumentsOfScenario.Add("NumOfAdditionalIters", numOfAdditionalIters);
            argumentsOfScenario.Add("StatusHiterInput", statusHiterInput);
            argumentsOfScenario.Add("DaysBack", daysBack);
            argumentsOfScenario.Add("ShovarCreatedDB", shovarCreatedDB);
            argumentsOfScenario.Add("ResponseResult", responseResult);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("hiter nilve is exists with status more than status in the input", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 78
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 79
 testRunner.Given("valid access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 80
 testRunner.And(string.Format("default tik rishuy with parameters for mahut: {0}, {1}, {2}, {3}, 10", numOfMahuyot, maslul, mahutRashit, daysBack), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 81
 testRunner.And(string.Format("run Ser028 create additional permit with parameters: {0}, {1}, 1.0, {2}", sugIter, sibatBakasha, numOfAdditionalIters), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 83
 testRunner.And("run Ser029 permit update with parameters: 60", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 84
 testRunner.Then("hiter nilve created in DB: \'Yes\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 86
 testRunner.Given(string.Format("run Ser029 permit update with parameters: {0}", statusHiterInput), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 87
 testRunner.Then(string.Format("Ser029 response description should be {0}", responseResult), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 88
 testRunner.Then("status of HiterNilve in DB: 60", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 89
 testRunner.Then(string.Format("shovar tashlum for Hiter created in DB: {0}", shovarCreatedDB), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("hiter nilve is exists with status less than status in the input")]
        [NUnit.Framework.CategoryAttribute("Test")]
        [NUnit.Framework.TestCaseAttribute("1", "1", "9", "1", "0", "1", "3", "3", "0", "\'No\'", "\'null\'", null)]
        [NUnit.Framework.TestCaseAttribute("1", "1", "9", "1", "0", "1", "4", "4", "0", "\'No\'", "\'null\'", null)]
        [NUnit.Framework.TestCaseAttribute("1", "1", "9", "1", "0", "1", "5", "5", "0", "\'No\'", "\'null\'", null)]
        [NUnit.Framework.TestCaseAttribute("1", "1", "9", "1", "0", "1", "6", "6", "0", "\'No\'", "\'null\'", null)]
        public virtual void HiterNilveIsExistsWithStatusLessThanStatusInTheInput(string numOfMahuyot, string maslul, string mahutRashit, string sugIter, string sibatBakasha, string numOfAdditionalIters, string statusHiterInput, string statusHiterOutput, string daysBack, string shovarCreatedDB, string responseResult, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Test"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("NumOfMahuyot", numOfMahuyot);
            argumentsOfScenario.Add("Maslul", maslul);
            argumentsOfScenario.Add("MahutRashit", mahutRashit);
            argumentsOfScenario.Add("SugIter", sugIter);
            argumentsOfScenario.Add("SibatBakasha", sibatBakasha);
            argumentsOfScenario.Add("NumOfAdditionalIters", numOfAdditionalIters);
            argumentsOfScenario.Add("StatusHiterInput", statusHiterInput);
            argumentsOfScenario.Add("StatusHiterOutput", statusHiterOutput);
            argumentsOfScenario.Add("DaysBack", daysBack);
            argumentsOfScenario.Add("ShovarCreatedDB", shovarCreatedDB);
            argumentsOfScenario.Add("ResponseResult", responseResult);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("hiter nilve is exists with status less than status in the input", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 101
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 102
 testRunner.Given("valid access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 103
 testRunner.And(string.Format("default tik rishuy with parameters for mahut: {0}, {1}, {2}, {3}, 10.0", numOfMahuyot, maslul, mahutRashit, daysBack), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 104
 testRunner.And(string.Format("run Ser028 create additional permit with parameters: {0}, {1}, 1.0, {2}", sugIter, sibatBakasha, numOfAdditionalIters), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 106
 testRunner.And("run Ser029 permit update with parameters: 10", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 107
 testRunner.Then("hiter nilve created in DB: \'Yes\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 108
 testRunner.Given("update status Hiter to: 10", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 109
 testRunner.Given(string.Format("run Ser029 permit update with parameters: {0}", statusHiterInput), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 110
 testRunner.Then(string.Format("Ser029 response description should be {0}", responseResult), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 111
 testRunner.Then(string.Format("status of HiterNilve in DB: {0}", statusHiterOutput), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 112
 testRunner.Then(string.Format("shovar tashlum for Hiter created in DB: {0}", shovarCreatedDB), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("temp")]
        [NUnit.Framework.CategoryAttribute("Test")]
        public virtual void Temp()
        {
            string[] tagsOfScenario = new string[] {
                    "Test"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("temp", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 127
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 128
 testRunner.Given("valid access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 129
 testRunner.And("default tik rishuy with parameters for mahut: 1, 3, 7, 0, 10", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 132
 testRunner.And("update objects creation date \'-00-00-19T00:00\', \'essek\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 133
 testRunner.And("run Ser028 create additional permit with parameters: 7, 0, 0.0, 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 134
 testRunner.When("run Ser066 get business data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 136
 testRunner.Given("run Ser029 permit update with parameters: 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 141
 testRunner.Given("update objects creation date \'-00-00-05T00:00\', \'hiter_nilve\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
