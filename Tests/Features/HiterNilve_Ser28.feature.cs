// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Tests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("HiterNilve_Ser28_positive")]
    public partial class HiterNilve_Ser28_PositiveFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "HiterNilve_Ser28.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "HiterNilve_Ser28_positive", "Ser028 יצירת בקשה ותחנות להיתר נלווה\r\n/LicenseService/api/AdditionalPermit/Create" +
                    "AdditionalPermitRequest\r\nתנאיים: תיק עסק > בקשה > מהות > תחנות\r\n\r\nבאג 17848\r\nבאג" +
                    " 18350\r\n\r\nלבדוק באיזה סטטוס בקשה נפתחת!!\r\nלבדוק שאם בקשה להיתר היא חידוש ולהיתר " +
                    "יש חידוש אוטומטי, אף תחנה לא נפתחת!!!\r\n\r\nScenario <create bakasha and tahanot fo" +
                    "r iter nilve>\r\nבדיקה: אם {סיבת בקשה להיתר נלווה} מהקלט =! חידוש וגם {האם חידוש א" +
                    "וטומטי} =! 1 מסוגי היתר נלווה\r\nאז שרות 28 מייצר בקשה (מסך היתרים נלווים לטיפול) " +
                    "ותחנות בתיק עסק \r\n\r\n0. NumOfAdditionalIters = 2, NumOfMahuyot = 2, SibatBakasha " +
                    "= לא חידוש, SugIter = חידוש אוטומטי) לילה — sug_cheadush)\r\n1. NumOfMahuyot = 1, " +
                    "SibatBakasha = לא חידוש, SugIter = חידוש אוטומטי) לילה — sug_cheadush)\r\n2. NumOf" +
                    "Mahuyot = 1, SibatBakasha = לא חידוש, SugIter = חידוש אוטומטי) שולחנות — sug_che" +
                    "adush)\r\n3. NumOfMahuyot = 1, SibatBakasha = לא חידוש, SugIter = חידוש) פרגוד — s" +
                    "ug_cheadush)\r\n4. NumOfMahuyot = 1, SibatBakasha = לא חידוש, SugIter = חידוש אוטו" +
                    "מטי) שבת יפו — sug_cheadush)\r\n5. NumOfMahuyot = 1, SibatBakasha = לא חידוש, SugI" +
                    "ter = אין חידוש) מרכול — sug_cheadush)\r\n6. NumOfMahuyot = 1, SibatBakasha = לא ח" +
                    "ידוש, SugIter = אין חידוש) דוכן — sug_cheadush)\r\n\r\n7. NumOfMahuyot = 1, SibatBak" +
                    "asha = חידוש היתר לילה, SugIter = חידוש) פרגוד — sug_cheadush)\r\n8. NumOfMahuyot " +
                    "= 1, SibatBakasha = חידוש היתר שולחנות וכסאות, SugIter = אין חידוש) מרכול — sug_" +
                    "cheadush)\r\n9. NumOfMahuyot = 1, SibatBakasha = חידוש היתר פרגוד, SugIter = אין ח" +
                    "ידוש) דוכן — sug_cheadush)\r\n10. NumOfMahuyot = 1, SibatBakasha = חידוש היתר שבת," +
                    " SugIter = חידוש) פרגוד — sug_cheadush)\r\n11. NumOfMahuyot = 1, SibatBakasha = חי" +
                    "דוש היתר נלווה, SugIter = אין חידוש) מרכול — sug_cheadush)\r\n\r\nScenario <tahanot " +
                    "for iter nilve are not opened, bakasha only>\r\nבדיקה: אם {סיבת בקשה להיתר נלווה} " +
                    "מהקלט = חידוש וגם {האם חידוש אוטומטי} = 1 מסוגי היתר נלווה\r\nמחזיר קוד שגיאה 1 וא" +
                    "ת הפלט ומסיים", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("create bakasha and tahanot for iter nilve")]
        [NUnit.Framework.CategoryAttribute("Test")]
        [NUnit.Framework.TestCaseAttribute("1", "1", "1", null)]
        [NUnit.Framework.TestCaseAttribute("2", "1", "1", null)]
        [NUnit.Framework.TestCaseAttribute("3", "1", "1", null)]
        [NUnit.Framework.TestCaseAttribute("7", "1", "1", null)]
        [NUnit.Framework.TestCaseAttribute("8", "1", "1", null)]
        public virtual void CreateBakashaAndTahanotForIterNilve(string sugIter, string numOfHiters, string numOfHiterTahana, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Test"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("SugIter", sugIter);
            argumentsOfScenario.Add("NumOfHiters", numOfHiters);
            argumentsOfScenario.Add("NumOfHiterTahana", numOfHiterTahana);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("create bakasha and tahanot for iter nilve", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 36
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 37
 testRunner.Given("valid access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 38
 testRunner.And("default tik rishuy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 39
 testRunner.Given(string.Format("run Ser028 create additional permit with parameters: {0}, 0, 25.0, {1}", sugIter, numOfHiters), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 40
 testRunner.Then("hiter nilve created in DB: \'No\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 41
 testRunner.Then(string.Format("status of tahanot for HiterNilve in DB: 1, {0}", numOfHiterTahana), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 42
 testRunner.Then("bakasha laTipul tahanot: true, 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("tahanot for iter nilve are not opened")]
        [NUnit.Framework.CategoryAttribute("Test")]
        [NUnit.Framework.TestCaseAttribute("1", "45", "1", "0", null)]
        public virtual void TahanotForIterNilveAreNotOpened(string sugIter, string sibatBakasha, string numOfHters, string numOfHiterTahana, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Test"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("SugIter", sugIter);
            argumentsOfScenario.Add("SibatBakasha", sibatBakasha);
            argumentsOfScenario.Add("NumOfHters", numOfHters);
            argumentsOfScenario.Add("NumOfHiterTahana", numOfHiterTahana);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("tahanot for iter nilve are not opened", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 63
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 64
 testRunner.Given("valid access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 65
 testRunner.And("default tik rishuy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 66
 testRunner.Given(string.Format("run Ser028 create additional permit with parameters: {0}, {1}, 0.0, {2}", sugIter, sibatBakasha, numOfHters), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 67
 testRunner.Then(string.Format("status of tahanot for HiterNilve in DB: 1, {0}", numOfHiterTahana), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 68
 testRunner.Then("hiter nilve created in DB: \'No\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
