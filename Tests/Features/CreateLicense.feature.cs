// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Tests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("CreateDraftLicense")]
    public partial class CreateDraftLicenseFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "CreateLicense.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "CreateDraftLicense", "טסטים לתהליך יצירת טיוטה (באג, צריך להריץ אפי פעמיים),\r\nיצירת סירוב > בעל עסק מוו" +
                    "תר על שימוע (אפי) > סיום תהליך סירוב > רישיון מגיעה \r\nbug - 18011", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("create draft license")]
        [NUnit.Framework.CategoryAttribute("Test")]
        [NUnit.Framework.TestCaseAttribute("7", "\"2023-12-29T10:00:00.100Z\"", "\"2033-12-29T10:00:00.100Z\"", "1", null)]
        [NUnit.Framework.TestCaseAttribute("7", "\"2023-12-29T10:00:00.100Z\"", "\"2033-12-29T10:00:00.100Z\"", "2", null)]
        [NUnit.Framework.TestCaseAttribute("7", "\"2023-12-29T10:00:00.100Z\"", "\"2033-12-29T10:00:00.100Z\"", "3", null)]
        [NUnit.Framework.TestCaseAttribute("7", "\"2023-12-29T10:00:00.100Z\"", "\"2033-12-29T10:00:00.100Z\"", "4", null)]
        [NUnit.Framework.TestCaseAttribute("7", "\"2023-12-29T10:00:00.100Z\"", "\"2033-12-29T10:00:00.100Z\"", "5", null)]
        [NUnit.Framework.TestCaseAttribute("7", "\"2023-12-29T10:00:00.100Z\"", "\"2033-12-29T10:00:00.100Z\"", "6", null)]
        [NUnit.Framework.TestCaseAttribute("7", "\"2023-12-29T10:00:00.100Z\"", "\"2033-12-29T10:00:00.100Z\"", "8", null)]
        public virtual void CreateDraftLicense(string fileType, string startLicenseDate, string endLicenseDate, string licenseItemType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Test"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("fileType", fileType);
            argumentsOfScenario.Add("startLicenseDate", startLicenseDate);
            argumentsOfScenario.Add("endLicenseDate", endLicenseDate);
            argumentsOfScenario.Add("licenseItemType", licenseItemType);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("create draft license", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
 testRunner.Given("valid access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
 testRunner.And("default tik rishuy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 9
 testRunner.When("update status of tahanot meashrot to 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 10
 testRunner.When(string.Format("create draft license with parameters: {0}, {1}, {2}, {3}", fileType, startLicenseDate, endLicenseDate, licenseItemType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("create seruv")]
        [NUnit.Framework.CategoryAttribute("Test")]
        [NUnit.Framework.TestCaseAttribute("1", "\"2023-12-31T10:00:00.100Z\"", "\"2033-12-31T10:00:00.100Z\"", "1", null)]
        [NUnit.Framework.TestCaseAttribute("2", "\"2023-12-29T10:00:00.100Z\"", "\"2033-12-29T10:00:00.100Z\"", "2", null)]
        [NUnit.Framework.TestCaseAttribute("1", "\"2023-12-29T10:00:00.100Z\"", "\"2033-12-29T10:00:00.100Z\"", "3", null)]
        [NUnit.Framework.TestCaseAttribute("2", "\"2023-12-29T10:00:00.100Z\"", "\"2033-12-29T10:00:00.100Z\"", "4", null)]
        [NUnit.Framework.TestCaseAttribute("1", "\"2023-12-29T10:00:00.100Z\"", "\"2033-12-29T10:00:00.100Z\"", "5", null)]
        [NUnit.Framework.TestCaseAttribute("2", "\"2023-12-29T10:00:00.100Z\"", "\"2033-12-29T10:00:00.100Z\"", "6", null)]
        [NUnit.Framework.TestCaseAttribute("1", "\"2023-12-29T10:00:00.100Z\"", "\"2033-12-29T10:00:00.100Z\"", "7", null)]
        [NUnit.Framework.TestCaseAttribute("1", "\"2023-12-29T10:00:00.100Z\"", "\"2033-12-29T10:00:00.100Z\"", "8", null)]
        public virtual void CreateSeruv(string sugSeruv, string startLicenseDate, string endLicenseDate, string licenseItemType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Test"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("sugSeruv", sugSeruv);
            argumentsOfScenario.Add("startLicenseDate", startLicenseDate);
            argumentsOfScenario.Add("endLicenseDate", endLicenseDate);
            argumentsOfScenario.Add("licenseItemType", licenseItemType);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("create seruv", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 27
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 28
 testRunner.Given("valid access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 29
 testRunner.And("default tik rishuy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 30
 testRunner.When(string.Format("create draft license with parameters: 7, {0}, {1}, {2}", startLicenseDate, endLicenseDate, licenseItemType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 32
 testRunner.When("update status of tahanot meashrot to 4", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 33
 testRunner.And(string.Format("create seruv in DB with parameters: {0}", sugSeruv), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("business owner waived the right to a hearing")]
        [NUnit.Framework.CategoryAttribute("Test")]
        [NUnit.Framework.TestCaseAttribute("\"2024-01-15T10:00:00.100Z\"", "false", "1", "\"2023-12-31T10:00:00.100Z\"", "\"2033-12-31T10:00:00.100Z\"", "1", null)]
        [NUnit.Framework.TestCaseAttribute("\"2024-02-25T10:00:00.100Z\"", "false", "1", "\"2023-12-31T10:00:00.100Z\"", "\"2033-12-31T10:00:00.100Z\"", "2", null)]
        [NUnit.Framework.TestCaseAttribute("\"2024-02-28T10:00:00.100Z\"", "false", "1", "\"2023-12-31T10:00:00.100Z\"", "\"2033-12-31T10:00:00.100Z\"", "3", null)]
        [NUnit.Framework.TestCaseAttribute("\"2024-01-12T10:00:00.100Z\"", "false", "1", "\"2023-12-31T10:00:00.100Z\"", "\"2033-12-31T10:00:00.100Z\"", "4", null)]
        [NUnit.Framework.TestCaseAttribute("\"2024-01-20T10:00:00.100Z\"", "false", "1", "\"2023-12-31T10:00:00.100Z\"", "\"2033-12-31T10:00:00.100Z\"", "5", null)]
        [NUnit.Framework.TestCaseAttribute("\"2024-01-19T10:00:00.100Z\"", "false", "1", "\"2023-12-31T10:00:00.100Z\"", "\"2033-12-31T10:00:00.100Z\"", "6", null)]
        [NUnit.Framework.TestCaseAttribute("\"2024-02-01T10:00:00.100Z\"", "false", "1", "\"2023-12-31T10:00:00.100Z\"", "\"2033-12-31T10:00:00.100Z\"", "7", null)]
        [NUnit.Framework.TestCaseAttribute("\"2024-01-09T10:00:00.100Z\"", "false", "1", "\"2023-12-31T10:00:00.100Z\"", "\"2033-12-31T10:00:00.100Z\"", "8", null)]
        public virtual void BusinessOwnerWaivedTheRightToAHearing(string contactDateTime, string tiumShimua, string sugSeruv, string startLicenseDate, string endLicenseDate, string licenseItemType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Test"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("contactDateTime", contactDateTime);
            argumentsOfScenario.Add("tiumShimua", tiumShimua);
            argumentsOfScenario.Add("sugSeruv", sugSeruv);
            argumentsOfScenario.Add("startLicenseDate", startLicenseDate);
            argumentsOfScenario.Add("endLicenseDate", endLicenseDate);
            argumentsOfScenario.Add("licenseItemType", licenseItemType);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("business owner waived the right to a hearing", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 50
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 51
 testRunner.Given("valid access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 52
 testRunner.And("default tik rishuy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 53
 testRunner.When(string.Format("create draft license with parameters: 7, {0}, {1}, {2}", startLicenseDate, endLicenseDate, licenseItemType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 55
 testRunner.And("update status of tahanot meashrot to 4", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 56
 testRunner.And(string.Format("create seruv in DB with parameters: {0}", sugSeruv), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 57
 testRunner.And(string.Format("update Refuse Scheduled Hearing with parameters: {0}, {1}", contactDateTime, tiumShimua), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 58
 testRunner.And("cancel refuse license", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("create license and seruv in DB")]
        [NUnit.Framework.CategoryAttribute("Test")]
        [NUnit.Framework.TestCaseAttribute("8", "3", "\"2024-02-06T10:00:00.100Z\"", "\"2033-01-13T10:00:00.100Z\"", "2", null)]
        public virtual void CreateLicenseAndSeruvInDB(string sugTofes, string sugRishayon, string startLicenseDate, string endLicenseDate, string sugSeruv, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Test"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("SugTofes", sugTofes);
            argumentsOfScenario.Add("SugRishayon", sugRishayon);
            argumentsOfScenario.Add("startLicenseDate", startLicenseDate);
            argumentsOfScenario.Add("endLicenseDate", endLicenseDate);
            argumentsOfScenario.Add("sugSeruv", sugSeruv);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("create license and seruv in DB", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 75
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 76
 testRunner.Given("valid access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 77
 testRunner.And("default tik rishuy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 78
 testRunner.When(string.Format("create draft license with parameters: 8, {0}, {1}, 8", startLicenseDate, endLicenseDate), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 79
 testRunner.When(string.Format("create seruv in DB with parameters: {0}", sugSeruv), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("create license waiting for approval in DB")]
        [NUnit.Framework.CategoryAttribute("Test")]
        [NUnit.Framework.TestCaseAttribute("8", "3", "\"2024-02-06T10:00:00.100Z\"", "\"2033-01-13T10:00:00.100Z\"", null)]
        public virtual void CreateLicenseWaitingForApprovalInDB(string sugTofes, string sugRishayon, string startLicenseDate, string endLicenseDate, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Test"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("SugTofes", sugTofes);
            argumentsOfScenario.Add("SugRishayon", sugRishayon);
            argumentsOfScenario.Add("startLicenseDate", startLicenseDate);
            argumentsOfScenario.Add("endLicenseDate", endLicenseDate);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("create license waiting for approval in DB", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 88
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 89
 testRunner.Given("valid access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 90
 testRunner.And("default tik rishuy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
#line 91
 testRunner.When(string.Format("create license in DB: 2, {0}, {1},  {2}, {3}", sugTofes, sugRishayon, startLicenseDate, endLicenseDate), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
